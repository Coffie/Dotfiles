==> Downloading https://homebrew.bintray.com/bottles/ncurses-6.2.catalina.bottle.tar.gz
Already downloaded: /Users/coffie/Library/Caches/Homebrew/downloads/fb7918eec0d4d982719f79f5810d38dd02b75af0b1a6b007b201e3fc3ff3684e--ncurses-6.2.catalina.bottle.tar.gz
==> Downloading https://homebrew.bintray.com/bottles/pcre-8.44.catalina.bottle.tar.gz
Already downloaded: /Users/coffie/Library/Caches/Homebrew/downloads/6176d92bec825f2d0092ff0a534e9f74a0175cc0694c4f43959512ea9515c97f--pcre-8.44.catalina.bottle.tar.gz
==> Downloading https://homebrew.bintray.com/bottles/zsh-5.8_1.catalina.bottle.tar.gz
Already downloaded: /Users/coffie/Library/Caches/Homebrew/downloads/1323a8ff4c557493741f4fe4ca97703d583b8c85b0a6aa6d27a910f9730a531c--zsh-5.8_1.catalina.bottle.tar.gz
==> Installing dependencies for zsh: ncurses and pcre
==> Installing zsh dependency: ncurses
==> Pouring ncurses-6.2.catalina.bottle.tar.gz
==> Caveats
ncurses is keg-only, which means it was not symlinked into /usr/local,
because macOS already provides this software and installing another version in
parallel can cause all kinds of trouble.

If you need to have ncurses first in your PATH run:
  echo 'export PATH="/usr/local/opt/ncurses/bin:$PATH"' >> ~/.zshrc

For compilers to find ncurses you may need to set:
  export LDFLAGS="-L/usr/local/opt/ncurses/lib"
  export CPPFLAGS="-I/usr/local/opt/ncurses/include"

==> Summary
🍺  /usr/local/Cellar/ncurses/6.2: 3,913 files, 8.6MB
==> Installing zsh dependency: pcre
==> Pouring pcre-8.44.catalina.bottle.tar.gz
🍺  /usr/local/Cellar/pcre/8.44: 204 files, 5.5MB
==> Installing zsh
==> Pouring zsh-5.8_1.catalina.bottle.tar.gz
🍺  /usr/local/Cellar/zsh/5.8_1: 1,531 files, 14.8MB
==> Downloading https://homebrew.bintray.com/bottles/gettext-0.21.catalina.bottle.tar.gz
Already downloaded: /Users/coffie/Library/Caches/Homebrew/downloads/23d706293a07cab15a5ce7f1320f803ab504ada6a1482e1165d4c8b841745292--gettext-0.21.catalina.bottle.tar.gz
==> Downloading https://homebrew.bintray.com/bottles/lua-5.3.5_1.catalina.bottle.tar.gz
Already downloaded: /Users/coffie/Library/Caches/Homebrew/downloads/4cd18c18ed3211c29778492d6f9c2fba731b776bdeaeea49d84ae358a1db1164--lua-5.3.5_1.catalina.bottle.tar.gz
==> Downloading https://homebrew.bintray.com/bottles/perl-5.32.0.catalina.bottle.tar.gz
Already downloaded: /Users/coffie/Library/Caches/Homebrew/downloads/566376e4fb4451bd949770ba28af7df14c92f0e7696f1a488a9cb8e182531c76--perl-5.32.0.catalina.bottle.tar.gz
==> Downloading https://homebrew.bintray.com/bottles/gdbm-1.18.1_1.catalina.bottle.tar.gz
Already downloaded: /Users/coffie/Library/Caches/Homebrew/downloads/21bd17c428e48bcdca0a388899e5f618c52ea2f80af79fc5bf25f28cd59ca2b2--gdbm-1.18.1_1.catalina.bottle.tar.gz
==> Downloading https://homebrew.bintray.com/bottles/openssl%401.1-1.1.1h.catalina.bottle.tar.gz
Already downloaded: /Users/coffie/Library/Caches/Homebrew/downloads/4495e57344279a889f251b5431855ca33bf33b365d3c619e953c8390cfdc336b--openssl@1.1-1.1.1h.catalina.bottle.tar.gz
==> Downloading https://homebrew.bintray.com/bottles/readline-8.0.4.catalina.bottle.tar.gz
Already downloaded: /Users/coffie/Library/Caches/Homebrew/downloads/2fd31f598c2c259fa13d0bfb5d6cb892df479dce11424dec3a7af613de062ef2--readline-8.0.4.catalina.bottle.tar.gz
==> Downloading https://homebrew.bintray.com/bottles/sqlite-3.33.0.catalina.bottle.tar.gz
Already downloaded: /Users/coffie/Library/Caches/Homebrew/downloads/6802724262549ff9d8bb8483907888d3d4f59b87c720f6e595081ef217c6eb6c--sqlite-3.33.0.catalina.bottle.tar.gz
==> Downloading https://homebrew.bintray.com/bottles/xz-5.2.5.catalina.bottle.tar.gz
Already downloaded: /Users/coffie/Library/Caches/Homebrew/downloads/adc845ca1c49e4b34545aba7f6a277dc85cc30fb3c74a3dda94c823db2ba417e--xz-5.2.5.catalina.bottle.tar.gz
==> Downloading https://homebrew.bintray.com/bottles/python%403.9-3.9.0_2.catalina.bottle.tar.gz
Already downloaded: /Users/coffie/Library/Caches/Homebrew/downloads/f40ec7142538a2d124655023300e9ba1c6d01ab20656ab9908a4472e284b5b13--python@3.9-3.9.0_2.catalina.bottle.tar.gz
==> Downloading https://homebrew.bintray.com/bottles/libyaml-0.2.5.catalina.bottle.tar.gz
Already downloaded: /Users/coffie/Library/Caches/Homebrew/downloads/ce25078d4ae1e4aeffb2533fc1baab76a90707330912ecebf2d92b5d6fbb65ac--libyaml-0.2.5.catalina.bottle.tar.gz
==> Downloading https://homebrew.bintray.com/bottles/ruby-2.7.2.catalina.bottle.tar.gz
Already downloaded: /Users/coffie/Library/Caches/Homebrew/downloads/00c97dba192e9c242c6bb51b7d0a4a3a9fc77328277e43e49497c64e6450b55d--ruby-2.7.2.catalina.bottle.tar.gz
==> Downloading https://homebrew.bintray.com/bottles/vim-8.2.2000.catalina.bottle.tar.gz
Already downloaded: /Users/coffie/Library/Caches/Homebrew/downloads/d0eaa0e14bb076ba66c0fb179d17627113812424a530327995729af8ff85bce5--vim-8.2.2000.catalina.bottle.tar.gz
==> Installing dependencies for vim: gettext, lua, perl, gdbm, openssl@1.1, readline, sqlite, xz, python@3.9, libyaml and ruby
==> Installing vim dependency: gettext
==> Pouring gettext-0.21.catalina.bottle.tar.gz
🍺  /usr/local/Cellar/gettext/0.21: 1,953 files, 19.0MB
==> Installing vim dependency: lua
==> Pouring lua-5.3.5_1.catalina.bottle.tar.gz
==> Caveats
You may also want luarocks:
  brew install luarocks
==> Summary
🍺  /usr/local/Cellar/lua/5.3.5_1: 28 files, 286.6KB
==> Installing vim dependency: perl
==> Pouring perl-5.32.0.catalina.bottle.tar.gz
==> Caveats
By default non-brewed cpan modules are installed to the Cellar. If you wish
for your modules to persist across updates we recommend using `local::lib`.

You can set that up like this:
  PERL_MM_OPT="INSTALL_BASE=$HOME/perl5" cpan local::lib
  echo 'eval "$(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib=$HOME/perl5)"' >> ~/.zshrc
==> Summary
🍺  /usr/local/Cellar/perl/5.32.0: 2,458 files, 63.5MB
==> Installing vim dependency: gdbm
==> Pouring gdbm-1.18.1_1.catalina.bottle.tar.gz
🍺  /usr/local/Cellar/gdbm/1.18.1_1: 25 files, 641KB
==> Installing vim dependency: openssl@1.1
==> Pouring openssl@1.1-1.1.1h.catalina.bottle.tar.gz
==> Caveats
A CA file has been bootstrapped using certificates from the system
keychain. To add additional certificates, place .pem files in
  /usr/local/etc/openssl@1.1/certs

and run
  /usr/local/opt/openssl@1.1/bin/c_rehash

openssl@1.1 is keg-only, which means it was not symlinked into /usr/local,
because macOS provides LibreSSL.

If you need to have openssl@1.1 first in your PATH run:
  echo 'export PATH="/usr/local/opt/openssl@1.1/bin:$PATH"' >> ~/.zshrc

For compilers to find openssl@1.1 you may need to set:
  export LDFLAGS="-L/usr/local/opt/openssl@1.1/lib"
  export CPPFLAGS="-I/usr/local/opt/openssl@1.1/include"

==> Summary
🍺  /usr/local/Cellar/openssl@1.1/1.1.1h: 8,067 files, 18.5MB
==> Installing vim dependency: readline
==> Pouring readline-8.0.4.catalina.bottle.tar.gz
==> Caveats
readline is keg-only, which means it was not symlinked into /usr/local,
because macOS provides BSD libedit.

For compilers to find readline you may need to set:
  export LDFLAGS="-L/usr/local/opt/readline/lib"
  export CPPFLAGS="-I/usr/local/opt/readline/include"

==> Summary
🍺  /usr/local/Cellar/readline/8.0.4: 48 files, 1.5MB
==> Installing vim dependency: sqlite
==> Pouring sqlite-3.33.0.catalina.bottle.tar.gz
==> Caveats
sqlite is keg-only, which means it was not symlinked into /usr/local,
because macOS already provides this software and installing another version in
parallel can cause all kinds of trouble.

If you need to have sqlite first in your PATH run:
  echo 'export PATH="/usr/local/opt/sqlite/bin:$PATH"' >> ~/.zshrc

For compilers to find sqlite you may need to set:
  export LDFLAGS="-L/usr/local/opt/sqlite/lib"
  export CPPFLAGS="-I/usr/local/opt/sqlite/include"

==> Summary
🍺  /usr/local/Cellar/sqlite/3.33.0: 11 files, 4MB
==> Installing vim dependency: xz
==> Pouring xz-5.2.5.catalina.bottle.tar.gz
🍺  /usr/local/Cellar/xz/5.2.5: 92 files, 1.1MB
==> Installing vim dependency: python@3.9
==> Pouring python@3.9-3.9.0_2.catalina.bottle.tar.gz
==> /usr/local/Cellar/python@3.9/3.9.0_2/bin/python3 -s setup.py --no-user-cfg install --force --verbose --install-scripts=/usr/local/Cellar/python@3.9/3.9.0_2/bin --install-lib=/usr/local/lib/python3.9/site-packages --single-version-externally-managed --record=installed.txt
==> /usr/local/Cellar/python@3.9/3.9.0_2/bin/python3 -s setup.py --no-user-cfg install --force --verbose --install-scripts=/usr/local/Cellar/python@3.9/3.9.0_2/bin --install-lib=/usr/local/lib/python3.9/site-packages --single-version-externally-managed --record=installed.txt
==> /usr/local/Cellar/python@3.9/3.9.0_2/bin/python3 -s setup.py --no-user-cfg install --force --verbose --install-scripts=/usr/local/Cellar/python@3.9/3.9.0_2/bin --install-lib=/usr/local/lib/python3.9/site-packages --single-version-externally-managed --record=installed.txt
==> Caveats
Python has been installed as
  /usr/local/bin/python3

Unversioned symlinks `python`, `python-config`, `pip` etc. pointing to
`python3`, `python3-config`, `pip3` etc., respectively, have been installed into
  /usr/local/opt/python@3.9/libexec/bin

You can install Python packages with
  pip3 install <package>
They will install into the site-package directory
  /usr/local/lib/python3.9/site-packages

See: https://docs.brew.sh/Homebrew-and-Python
==> Summary
🍺  /usr/local/Cellar/python@3.9/3.9.0_2: 4,447 files, 72MB
==> Installing vim dependency: libyaml
==> Pouring libyaml-0.2.5.catalina.bottle.tar.gz
🍺  /usr/local/Cellar/libyaml/0.2.5: 10 files, 323.6KB
==> Installing vim dependency: ruby
==> Pouring ruby-2.7.2.catalina.bottle.tar.gz
==> Caveats
By default, binaries installed by gem will be placed into:
  /usr/local/lib/ruby/gems/2.7.0/bin

You may want to add this to your PATH.

ruby is keg-only, which means it was not symlinked into /usr/local,
because macOS already provides this software and installing another version in
parallel can cause all kinds of trouble.

If you need to have ruby first in your PATH run:
  echo 'export PATH="/usr/local/opt/ruby/bin:$PATH"' >> ~/.zshrc

For compilers to find ruby you may need to set:
  export LDFLAGS="-L/usr/local/opt/ruby/lib"
  export CPPFLAGS="-I/usr/local/opt/ruby/include"

==> Summary
🍺  /usr/local/Cellar/ruby/2.7.2: 20,156 files, 35.3MB
==> Installing vim
==> Pouring vim-8.2.2000.catalina.bottle.tar.gz
🍺  /usr/local/Cellar/vim/8.2.2000: 1,953 files, 33.3MB
==> Downloading https://homebrew.bintray.com/bottles/libevent-2.1.12.catalina.bottle.tar.gz
Already downloaded: /Users/coffie/Library/Caches/Homebrew/downloads/c8f3769ad847d95db9fae33b1a021fa1cf05ec204fd2cf583fc73aa0772e3a19--libevent-2.1.12.catalina.bottle.tar.gz
==> Downloading https://homebrew.bintray.com/bottles/utf8proc-2.5.0.catalina.bottle.tar.gz
Already downloaded: /Users/coffie/Library/Caches/Homebrew/downloads/301a5cdf1e46f55aa881a5de23093a4ff8e0d32fce631425f3a41b6563f32998--utf8proc-2.5.0.catalina.bottle.tar.gz
==> Downloading https://homebrew.bintray.com/bottles/tmux-3.1c_1.catalina.bottle.tar.gz
Already downloaded: /Users/coffie/Library/Caches/Homebrew/downloads/f88d361bd0e466a3d544518137b87208bac4099e32f54da27e8aa04f05334ba9--tmux-3.1c_1.catalina.bottle.tar.gz
==> Installing dependencies for tmux: libevent and utf8proc
==> Installing tmux dependency: libevent
==> Pouring libevent-2.1.12.catalina.bottle.tar.gz
🍺  /usr/local/Cellar/libevent/2.1.12: 57 files, 1.9MB
==> Installing tmux dependency: utf8proc
==> Pouring utf8proc-2.5.0.catalina.bottle.tar.gz
🍺  /usr/local/Cellar/utf8proc/2.5.0: 10 files, 650.2KB
==> Installing tmux
==> Pouring tmux-3.1c_1.catalina.bottle.tar.gz
==> Caveats
Example configuration has been installed to:
  /usr/local/opt/tmux/share/tmux

Bash completion has been installed to:
  /usr/local/etc/bash_completion.d
==> Summary
🍺  /usr/local/Cellar/tmux/3.1c_1: 9 files, 867KB
==> Caveats
==> ncurses
ncurses is keg-only, which means it was not symlinked into /usr/local,
because macOS already provides this software and installing another version in
parallel can cause all kinds of trouble.

If you need to have ncurses first in your PATH run:
  echo 'export PATH="/usr/local/opt/ncurses/bin:$PATH"' >> ~/.zshrc

For compilers to find ncurses you may need to set:
  export LDFLAGS="-L/usr/local/opt/ncurses/lib"
  export CPPFLAGS="-I/usr/local/opt/ncurses/include"

==> lua
You may also want luarocks:
  brew install luarocks
==> perl
By default non-brewed cpan modules are installed to the Cellar. If you wish
for your modules to persist across updates we recommend using `local::lib`.

You can set that up like this:
  PERL_MM_OPT="INSTALL_BASE=$HOME/perl5" cpan local::lib
  echo 'eval "$(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib=$HOME/perl5)"' >> ~/.zshrc
==> openssl@1.1
A CA file has been bootstrapped using certificates from the system
keychain. To add additional certificates, place .pem files in
  /usr/local/etc/openssl@1.1/certs

and run
  /usr/local/opt/openssl@1.1/bin/c_rehash

openssl@1.1 is keg-only, which means it was not symlinked into /usr/local,
because macOS provides LibreSSL.

If you need to have openssl@1.1 first in your PATH run:
  echo 'export PATH="/usr/local/opt/openssl@1.1/bin:$PATH"' >> ~/.zshrc

For compilers to find openssl@1.1 you may need to set:
  export LDFLAGS="-L/usr/local/opt/openssl@1.1/lib"
  export CPPFLAGS="-I/usr/local/opt/openssl@1.1/include"

==> readline
readline is keg-only, which means it was not symlinked into /usr/local,
because macOS provides BSD libedit.

For compilers to find readline you may need to set:
  export LDFLAGS="-L/usr/local/opt/readline/lib"
  export CPPFLAGS="-I/usr/local/opt/readline/include"

==> sqlite
sqlite is keg-only, which means it was not symlinked into /usr/local,
because macOS already provides this software and installing another version in
parallel can cause all kinds of trouble.

If you need to have sqlite first in your PATH run:
  echo 'export PATH="/usr/local/opt/sqlite/bin:$PATH"' >> ~/.zshrc

For compilers to find sqlite you may need to set:
  export LDFLAGS="-L/usr/local/opt/sqlite/lib"
  export CPPFLAGS="-I/usr/local/opt/sqlite/include"

==> python@3.9
Python has been installed as
  /usr/local/bin/python3

Unversioned symlinks `python`, `python-config`, `pip` etc. pointing to
`python3`, `python3-config`, `pip3` etc., respectively, have been installed into
  /usr/local/opt/python@3.9/libexec/bin

You can install Python packages with
  pip3 install <package>
They will install into the site-package directory
  /usr/local/lib/python3.9/site-packages

See: https://docs.brew.sh/Homebrew-and-Python
==> ruby
By default, binaries installed by gem will be placed into:
  /usr/local/lib/ruby/gems/2.7.0/bin

You may want to add this to your PATH.

ruby is keg-only, which means it was not symlinked into /usr/local,
because macOS already provides this software and installing another version in
parallel can cause all kinds of trouble.

If you need to have ruby first in your PATH run:
  echo 'export PATH="/usr/local/opt/ruby/bin:$PATH"' >> ~/.zshrc

For compilers to find ruby you may need to set:
  export LDFLAGS="-L/usr/local/opt/ruby/lib"
  export CPPFLAGS="-I/usr/local/opt/ruby/include"

==> tmux
Example configuration has been installed to:
  /usr/local/opt/tmux/share/tmux

Bash completion has been installed to:
  /usr/local/etc/bash_completion.d
Updating Homebrew...
==> Installing yabai from koekeishiya/formulae
==> Downloading https://github.com/koekeishiya/yabai/releases/download/v3.3.4/ya
Already downloaded: /Users/coffie/Library/Caches/Homebrew/downloads/9f43bfa22dc10eb424ec3d4b7e15428eae629871175cef7561f84af7ba272275--yabai-v3.3.4.tar.gz
==> Caveats
Copy the example configuration into your home directory:
  cp /usr/local/opt/yabai/share/yabai/examples/yabairc ~/.yabairc
  cp /usr/local/opt/yabai/share/yabai/examples/skhdrc ~/.skhdrc

Logs will be found in
  /usr/local/var/log/yabai/yabai.[out|err].log

To have launchd start koekeishiya/formulae/yabai now and restart at login:
  brew services start koekeishiya/formulae/yabai
Or, if you don't want/need a background service you can just run:
  yabai
==> Summary
🍺  /usr/local/Cellar/yabai/3.3.4: 7 files, 657.3KB, built in 3 seconds
